@model IEnumerable<os.Areas.Identity.Data.AppUser>
<div class="text-center">
    <img src="~/img/group.svg" style="min-height: 125px;" />
</div>
<h2 class="text-center mb-4 light-txt">Manage Users</h2>
<div class="search-row">
    <div class="search-colum-1">
    @* 
        <a class="btn btn-primary cust-btn" id="register" asp-area="Identity" asp-page="/Account/AdminRegister" role="button" data-bs-toggle="tooltip" data-bs-placement="bottom" data-bs-title="Add a new user to the system.">Add New</a>
     *@
    </div>
    <div class="search-colum-3">
        <input type="text" id="searchInput" class="form-control" style="max-width:200px;" placeholder="Search...">
        <img src="~/img/search.svg" class="search-img" />
    </div>
</div>
<div class="table-wrapper">
    <table class="table table-striped">
        <thead>
            <tr>
                <th>
                    @Html.DisplayNameFor(model => model.FirstName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.LastName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Email)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.PhoneNumber)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.UserRole)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ActiveStatus)
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody id="tableBody">
            @foreach (var item in Model)
            {
                <tr>
                    <td>
                        @Html.DisplayFor(modelItem => item.FirstName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.LastName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Email)
                    </td>
                    <td class="text-center">
                        @Html.DisplayFor(modelItem => item.PhoneNumber)
                    </td>
                    <td class="text-center">
                        @Html.DisplayFor(modelItem => item.UserRole)
                    </td>
                    <td class="text-center">
                        @Html.DisplayFor(modelItem => item.ActiveStatus)
                    </td>
                    <td>
                        <a class="btn btn-outline-secondary" asp-action="EditAccountDetails" asp-route-id="@item.Id" role="button" data-bs-toggle="tooltip" data-bs-placement="bottom" data-bs-title="Edit the users details.">Details</a>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>
@* Search and Filter *@
<script>
    document.getElementById('searchInput').addEventListener('keyup', function () {
        let input = this.value.toLowerCase();
        let rows = document.getElementById('tableBody').getElementsByTagName('tr');

        for (let i = 0; i < rows.length; i++) {
            let rowData = rows[i].getElementsByTagName('td');
            let match = false;

            for (let j = 0; j < rowData.length; j++) {
                if (rowData[j].innerText.toLowerCase().indexOf(input) > -1) {
                    match = true;
                    break;
                }
            }
            if (match) {
                rows[i].style.display = '';
            } else {
                rows[i].style.display = 'none';
            }
        }
    });

</script>
<script>
    function toggleColumns() {
        const headers = document.querySelectorAll('thead th');
        const rows = document.querySelectorAll('tbody tr');
        const columnsToRemove = [1, 3, 4, 5]; 

        if (window.innerWidth < 800) {
            // Hide columns on small screens
            headers.forEach((header, index) => {
                if (columnsToRemove.includes(index)) {
                    header.style.display = 'none';
                }
            });
            rows.forEach(row => {
                const cells = row.querySelectorAll('td');
                cells.forEach((cell, index) => {
                    if (columnsToRemove.includes(index)) {
                        cell.style.display = 'none'; 
                    }
                });
            });
        } else {
            // Show columns on larger screens
            headers.forEach((header, index) => {
                if (columnsToRemove.includes(index)) {
                    header.style.display = ''; 
                }
            });
            rows.forEach(row => {
                const cells = row.querySelectorAll('td');
                cells.forEach((cell, index) => {
                    if (columnsToRemove.includes(index)) {
                        cell.style.display = ''; 
                    }
                });
            });
        }
    }
    function debounce(func, wait) {
        let timeout;
        return function (...args) {
            clearTimeout(timeout);
            timeout = setTimeout(() => func.apply(this, args), wait);
        };
    }
    const debouncedToggleColumns = debounce(toggleColumns, 100);
    window.addEventListener('load', debouncedToggleColumns);
    window.addEventListener('resize', debouncedToggleColumns);
</script>