@model os.Models.SpeakerModel
@{
    ViewData["Title"] = "Add Speaker";
    string? statusMessage = ViewBag.StatusMessage;
    var nameSelectionModel = ViewBag.NameSelectionModel as os.Models.NameSelectionModel;
}
<div class="edit-container-row">
    <div class="edit-container-column">
        <div class="text-center">
            <img src="~/img/speaker.svg" style="min-height: 100px;" />
        </div>
        <div>
            <center><h1 class="text-center mb-4 light-txt">Add Speaker</h1></center>
        </div>
        @if (!string.IsNullOrEmpty(statusMessage))
        {
            <div class="alert alert-info">
                @statusMessage
            </div>
        }
        <form asp-action="UploadSpeaker" enctype="multipart/form-data" method="post" id="uploadSpeakerForm">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group" style="margin-top: 5px;">
                <label asp-for="FirstName" class="control-label cust-label"></label>
                <input asp-for="FirstName" class="form-control" />
                <span asp-validation-for="FirstName" class="text-danger"></span>
            </div>
            <div class="form-group" style="margin-top: 5px;">
                <label asp-for="LastName" class="control-label cust-label">Last Name or Initial (Speaker)</label>
                <input asp-for="LastName" class="form-control" />
                <span asp-validation-for="LastName" class="text-danger"></span>
            </div>
            <div class="form-group" style="margin-top: 5px;">
                <label asp-for="Description" class="control-label cust-label"></label>
                <textarea asp-for="Description" class="form-control"></textarea>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="form-group" style="margin-top: 5px;">
                <label asp-for="DateRecorded" class="control-label cust-label">Date Recoded (Use today's date if unknown.)</label>
                <input asp-for="DateRecorded" class="form-control" />
                <span asp-validation-for="DateRecorded" class="text-danger"></span>
            </div>
            <div class="form-group" style="margin-top: 5px;" hidden>
                <label asp-for="UploadDate" class="control-label cust-label"></label>
                <input asp-for="UploadDate" class="form-control" readonly />
                <span asp-validation-for="UploadDate" class="text-danger"></span>
            </div>
            <div class="form-group" style="margin-top: 5px;" hidden>
                <label asp-for="SpeakerStatus" class="control-label cust-label"></label>
                <select asp-for="SpeakerStatus" class="form-drop-down form-select" aria-required="true">
                    <option default id="Active">Active</option>
                    <option default id="Disabled">Disabled</option>
                </select>
                <span asp-validation-for="SpeakerStatus" class="text-danger"></span>
            </div>
            <div class="form-group" style="margin-top: 5px;" hidden>
                <label asp-for="Visibility" class="control-label cust-label"></label>
                <select asp-for="Visibility" class="form-drop-down form-select" aria-required="true">
                    <option default id="Private">Private</option>
                    <option default id="Universal">Universal</option>
                </select>
                <span asp-validation-for="SpeakerStatus" class="text-danger"></span>
            </div>
            <div class="form-group" style="margin-top: 10px;">
                <label for="FormFile" class="control-label cust-label">Upload MP3 File:</label>
                <input type="file" name="FormFile" class="form-control" id="FormFile" accept=".mp3" />
                <small class="form-text text-muted">Select a single .mp3 file.</small>
            </div>
            <div class="form-group" style="margin-top: 5px;">
                <input asp-for="ReplacedNames" type="checkbox" class="form-check-input" id="ReplacedNames" />
                <label asp-for="ReplacedNames" class="form-check-label control-label cust-label">Replace Names</label>
                <span asp-validation-for="ReplacedNames" class="text-danger"></span>
                <small class="form-text text-muted d-block">Note: When enabled, audio processing can take approximately 10-30 minutes.</small>
            </div>

            <!-- Progress bar container (hidden by default) -->
            <div id="processingStatusContainer" class="form-group" style="margin-top: 15px; display: none;">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Processing Audio</h5>
                        <p class="card-text" id="processingStatusText">Initializing audio processing...</p>
                        <div class="progress">
                            <div id="processingProgressBar" class="progress-bar progress-bar-striped progress-bar-animated"
                                 role="progressbar" style="width: 0%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
                        </div>
                        <p class="text-muted mt-2" id="timeRemainingText">Estimating time remaining...</p>
                    </div>
                </div>
            </div>

            <div class="form-group" style="margin-top: 15px;">
                <a href="@Url.Action("ViewSpeakers", "Admin")" class="btn edit-btn">Back</a>
                <input type="submit" value="Submit" class="edit-btn" id="submitButton" style="min-width: 150px !important;" />
            </div>
        </form>

        @if (nameSelectionModel != null && nameSelectionModel.Names.Any())
        {
            <div id="nameSelectionWrapper" class="mt-4">
                <form asp-action="UploadSpeaker" method="post" id="nameSelectionForm">
                    <div id="nameSelectionContainer" class="card">
                        <div class="card-header bg-primary text-white">
                            <h5 class="mb-0">Select Names to Remove</h5>
                            <p class="mb-0">We found the following names in your audio. Select which ones you want to remove.</p>
                        </div>
                        <div class="card-body">
                            <div class="mb-3">
                                <div class="form-check">
                                    <input type="checkbox" id="selectAllNames" class="form-check-input" checked />
                                    <label class="form-check-label" for="selectAllNames">Select/Deselect All</label>
                                </div>
                            </div>
                            <div class="table-responsive">
                                <table class="table table-hover">
                                    <thead>
                                        <tr>
                                            <th style="width: 50px;">Select</th>
                                            <th>Name</th>
                                            <th>Start Time</th>
                                            <th>End Time</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @for (int i = 0; i < nameSelectionModel.Names.Count; i++)
                                        {
                                            <tr>
                                                <td>
                                                    <div class="form-check">
                                                        <input type="checkbox" class="form-check-input name-checkbox"
                                                               name="Names[@i].Selected" id="Names_@(i)_Selected"
                                                               value="true" checked />
                                                        <!-- Add this hidden field to ensure false value is sent when unchecked -->
                                                        <input type="hidden" name="Names[@i].Selected" value="false" />
                                                        <input type="hidden" name="Names[@i].Name" value="@nameSelectionModel.Names[i].Name" />
                                                        <input type="hidden" name="Names[@i].Start" value="@nameSelectionModel.Names[i].Start" />
                                                        <input type="hidden" name="Names[@i].End" value="@nameSelectionModel.Names[i].End" />
                                                    </div>
                                                </td>
                                                <td>@nameSelectionModel.Names[i].Name</td>
                                                <td>@nameSelectionModel.Names[i].Start</td>
                                                <td>@nameSelectionModel.Names[i].End</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                        </div>
                        <div class="card-footer d-flex" ">
                            <button type="button" id="cancelNameSelection" class="btn btn-secondary">Cancel</button>
                            <input type="hidden" name="existingSpeakerId" value="@nameSelectionModel.SpeakerId" />
                            <button type="submit" id="processNamesButton" class="btn btn-outline-secondary" style="min-width: 150px !important; margin-left:10px;">Process Names</button>
                        </div>
                    </div>
                </form>
            </div>
        }
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        $(document).ready(function() {
            // Get references to elements
            const uploadForm = $("#uploadSpeakerForm");
            const nameSelectionForm = $("#nameSelectionForm");
            const submitButton = $("#submitButton");
            const processNamesButton = $("#processNamesButton");
            const cancelNameSelection = $("#cancelNameSelection");
            const replacedNamesCheckbox = $("#ReplacedNames");
            const processingContainer = $("#processingStatusContainer");
            const progressBar = $("#processingProgressBar");
            const statusText = $("#processingStatusText");
            const timeRemainingText = $("#timeRemainingText");
            const formFile = $("#FormFile");
            const nameSelectionWrapper = $("#nameSelectionWrapper");
            const backButton = $(".edit-btn:contains('Back')");
            const statusMessage = $(".alert.alert-info");

            // Function to update visibility state
            function updateVisibilityState() {
                if (nameSelectionWrapper.length && nameSelectionWrapper.is(":visible")) {
                    // Name selection is visible - ensure processing container is hidden
                    processingContainer.hide();
                    submitButton.hide();
                    backButton.hide();
                }
            }

            // Call on page load
            updateVisibilityState();

            // Start time for the processing (will be set when form is submitted)
            let processingStartTime;
            // Total estimated processing time in seconds (10 minutes = 600 seconds)
            const totalProcessingTime = 600;

            // Handle "Select All" checkbox for names
            $("#selectAllNames").change(function() {
                $(".name-checkbox").prop('checked', $(this).prop('checked'));
            });

            // Update "Select All" if any individual checkbox changes
            $(".name-checkbox").change(function() {
                if (!$(this).prop('checked')) {
                    $("#selectAllNames").prop('checked', false);
                } else {
                    // Check if all boxes are checked
                    if ($(".name-checkbox:checked").length === $(".name-checkbox").length) {
                        $("#selectAllNames").prop('checked', true);
                    }
                }
            });

            // Initial upload form submission
            uploadForm.submit(function(e) {
                // Regular upload with "Replace Names" checked but no names selected yet
                if (replacedNamesCheckbox.is(":checked") && formFile[0].files.length > 0) {
                    // Show the processing container for initial upload/analysis
                    processingContainer.show();

                    // Set the start time
                    processingStartTime = new Date();

                    // Disable the submit button to prevent multiple submissions
                    submitButton.prop("disabled", true);
                    submitButton.val("Processing...");

                    // Change Back button to Cancel button
                    backButton.text("Cancel");
                    backButton.off("click").on("click", function(e) {
                        e.preventDefault();
                        if (confirm("Are you sure you want to cancel the processing? This will abort the current operation.")) {
                            window.location.href = "@Url.Action("ViewSpeakers", "Admin")";
                        }
                    });

                    // Start the progress update
                    updateProgress();

                    // Set an interval to update the progress regularly
                    const progressInterval = setInterval(updateProgress, 1000);
                    sessionStorage.setItem("progressInterval", progressInterval);
                }
            });

            // Name selection form submission
            if (nameSelectionForm.length > 0) {
                nameSelectionForm.submit(function(e) {
                    e.preventDefault();

                    // Disable the process button and start pulsing to indicate processing
                    processNamesButton.prop("disabled", true);
                    processNamesButton.text("Processing...");
                    startPulsing();

                    // Set the start time
                    processingStartTime = new Date();

                    // Submit the form after a short delay to allow the UI to update
                    setTimeout(() => {
                        this.submit();
                    }, 100);
                });
            }

            // Cancel button click handler
            if (cancelNameSelection.length > 0) {
                cancelNameSelection.click(function() {
                    if (confirm("Are you sure you want to cancel the name replacement process? The speaker will be uploaded without replacing names.")) {
                        window.location.href = "@Url.Action("ViewSpeakers", "Admin")";
                    }
                });
            }

            function updateProgress() {
                if (!processingStartTime) return;

                // Calculate elapsed time in seconds
                const elapsedTime = (new Date() - processingStartTime) / 1000;

                // Calculate progress as a percentage (capped at 99% until complete)
                const progressPercent = Math.min(Math.floor((elapsedTime / totalProcessingTime) * 100), 99);

                // Update the progress bar
                progressBar.css("width", progressPercent + "%");
                progressBar.attr("aria-valuenow", progressPercent);
                progressBar.text(progressPercent + "%");

                // Calculate time remaining
                const remainingSeconds = totalProcessingTime - elapsedTime;

                // Update status messages based on progress
                if (nameSelectionWrapper.length && nameSelectionWrapper.is(":visible")) {
                    // We're in the name processing phase
                    if (progressPercent < 10) {
                        statusText.text("Uploading audio file...");
                    } else if (progressPercent < 30) {
                        statusText.text("Transcribing audio...");
                    } else if (progressPercent < 60) {
                        statusText.text("Calculating time segments...");
                    } else if (progressPercent < 90) {
                        statusText.text("Structuring names and segments...");
                    } else {
                        statusText.text("Preparing name selection options...");
                    }
                } else {
                    // Initial upload phase
                    if (progressPercent < 10) {
                        statusText.text("Uploading audio file...");
                    } else if (progressPercent < 30) {
                        statusText.text("Transcribing audio...");
                    } else if (progressPercent < 60) {
                        statusText.text("Calculating time segments...");
                    } else if (progressPercent < 90) {
                        statusText.text("Structuring names and segments...");
                    } else {
                        statusText.text("Preparing name selection options...");
                    }
                }

                // Format and display time remaining
                timeRemainingText.text(formatTimeRemaining(remainingSeconds));
            }

            let pulseInterval; // Variable to store the interval ID for pulsing
            function startPulsing() {
                const button = document.getElementById('processNamesButton');
                if (!button) return;

                let opacity = 1; // Start with full opacity

                // Clear any existing interval to avoid multiple pulses
                clearInterval(pulseInterval);

                // Set up the interval to animate the opacity
                pulseInterval = setInterval(() => {
                    opacity = opacity === 1 ? 0.2 : 1; // Toggle opacity between 1 and 0.2
                    button.style.opacity = opacity; // Update the opacity
                }, 1000); // Toggle every second
            }

            function formatTimeRemaining(seconds) {
                if (seconds <= 0) return "Almost complete...";

                const minutes = Math.floor(seconds / 60);
                const remainingSeconds = Math.floor(seconds % 60);

                if (minutes > 0) {
                    return `Approximately ${minutes} min ${remainingSeconds} sec remaining`;
                } else {
                    return `Approximately ${remainingSeconds} seconds remaining`;
                }
            }
        });
    </script>
}