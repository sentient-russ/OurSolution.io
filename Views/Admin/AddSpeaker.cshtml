@model os.Models.SpeakerModel
@{
    ViewData["Title"] = "Add Speaker";
    string? statusMessage = ViewBag.StatusMessage;
}
<div class="edit-container-row">
    <div class="edit-container-column">
        <div class="text-center">
            <img src="~/img/speaker.svg" style="min-height: 100px;" />
        </div>
        <div>
            <center><h1 class="text-center mb-4 light-txt">Add Speaker</h1></center>
        </div>
        @if (!string.IsNullOrEmpty(statusMessage))
        {
            <div class="alert alert-info">
                @statusMessage
            </div>
        }
        <form asp-action="UploadSpeaker" enctype="multipart/form-data" method="post" id="uploadSpeakerForm">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <div class="form-group" style="margin-top: 5px;">
                <label asp-for="FirstName" class="control-label cust-label"></label>
                <input asp-for="FirstName" class="form-control" />
                <span asp-validation-for="FirstName" class="text-danger"></span>
            </div>
            <div class="form-group" style="margin-top: 5px;">
                <label asp-for="LastName" class="control-label cust-label">Last Name or Initial (Speaker)</label>
                <input asp-for="LastName" class="form-control" />
                <span asp-validation-for="LastName" class="text-danger"></span>
            </div>
            <div class="form-group" style="margin-top: 5px;">
                <label asp-for="Description" class="control-label cust-label"></label>
                <textarea asp-for="Description" class="form-control"></textarea>
                <span asp-validation-for="Description" class="text-danger"></span>
            </div>
            <div class="form-group" style="margin-top: 5px;">
                <label asp-for="DateRecorded" class="control-label cust-label"></label>
                <input asp-for="DateRecorded" class="form-control" />
                <span asp-validation-for="DateRecorded" class="text-danger"></span>
            </div>
            <div class="form-group" style="margin-top: 5px;">
                <label asp-for="UploadDate" class="control-label cust-label"></label>
                <input asp-for="UploadDate" class="form-control" readonly />
                <span asp-validation-for="UploadDate" class="text-danger"></span>
            </div>
            <div class="form-group" style="margin-top: 5px;">
                <label asp-for="SpeakerStatus" class="control-label cust-label"></label>
                <select asp-for="SpeakerStatus" class="form-drop-down form-select" aria-required="true">
                    <option default id="Active">Active</option>
                    <option default id="Disabled">Disabled</option>
                </select>
                <span asp-validation-for="SpeakerStatus" class="text-danger"></span>
            </div>
            <div class="form-group" style="margin-top: 5px;">
                <label asp-for="Visibility" class="control-label cust-label"></label>
                <select asp-for="Visibility" class="form-drop-down form-select" aria-required="true">
                    <option default id="Private">Private</option>
                    <option default id="Universal">Universal</option>
                </select>
                <span asp-validation-for="SpeakerStatus" class="text-danger"></span>
            </div>
            <div class="form-group" style="margin-top: 10px;">
                <label for="FormFile" class="control-label cust-label">Upload MP3 File:</label>
                <input type="file" name="FormFile" class="form-control" id="FormFile" accept=".mp3" />
                <small class="form-text text-muted">Select a single .mp3 file.</small>
            </div>
            <div class="form-group" style="margin-top: 5px;">
                <input asp-for="ReplacedNames" type="checkbox" class="form-check-input" id="ReplacedNames" />
                <label asp-for="ReplacedNames" class="form-check-label control-label cust-label">Replace Names</label>
                <span asp-validation-for="ReplacedNames" class="text-danger"></span>
                <small class="form-text text-muted d-block">Note: When enabled, audio processing will take approximately 15 minutes.</small>
            </div>

            <!-- Progress bar container (hidden by default) -->
            <div id="processingStatusContainer" class="form-group" style="margin-top: 15px; display: none;">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Processing Audio</h5>
                        <p class="card-text" id="processingStatusText">Initializing audio processing...</p>
                        <div class="progress">
                            <div id="processingProgressBar" class="progress-bar progress-bar-striped progress-bar-animated"
                                 role="progressbar" style="width: 0%" aria-valuenow="0" aria-valuemin="0" aria-valuemax="100"></div>
                        </div>
                        <p class="text-muted mt-2" id="timeRemainingText">Estimating time remaining...</p>
                    </div>
                </div>
            </div>

            <div class="form-group" style="margin-top: 15px;">
                <a href="@Url.Action("ViewSpeakers", "Admin")" class="btn edit-btn">Back</a>
                <input type="submit" value="Submit" class="edit-btn" id="submitButton" />
            </div>
        </form>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        $(document).ready(function() {
            const uploadForm = $("#uploadSpeakerForm");
            const submitButton = $("#submitButton");
            const replacedNamesCheckbox = $("#ReplacedNames");
            const processingContainer = $("#processingStatusContainer");
            const progressBar = $("#processingProgressBar");
            const statusText = $("#processingStatusText");
            const timeRemainingText = $("#timeRemainingText");
            const formFile = $("#FormFile");

            // Start time for the processing (will be set when form is submitted)
            let processingStartTime;
            // Total estimated processing time in seconds (15 minutes = 900 seconds)
            const totalProcessingTime = 900;

            uploadForm.on("submit", function(e) {
                // Only show progress if the "Replace Names" option is checked and a file is selected
                if (replacedNamesCheckbox.is(":checked") && formFile[0].files.length > 0) {
                    // Show the processing container
                    processingContainer.show();

                    // Set the start time
                    processingStartTime = new Date();

                    // Disable the submit button to prevent multiple submissions
                    submitButton.prop("disabled", true);
                    submitButton.val("Processing...");

                    // Start the progress update
                    updateProgress();

                    // Set an interval to update the progress regularly
                    const progressInterval = setInterval(updateProgress, 1000);

                    // Store the interval ID in sessionStorage so we can clear it if needed
                    sessionStorage.setItem("progressInterval", progressInterval);
                }
            });

            function updateProgress() {
                if (!processingStartTime) return;

                // Calculate elapsed time in seconds
                const elapsedTime = (new Date() - processingStartTime) / 1000;

                // Calculate progress as a percentage (capped at 99% until complete)
                const progressPercent = Math.min(Math.floor((elapsedTime / totalProcessingTime) * 100), 99);

                // Update the progress bar
                progressBar.css("width", progressPercent + "%");
                progressBar.attr("aria-valuenow", progressPercent);
                progressBar.text(progressPercent + "%");

                // Calculate time remaining
                const remainingSeconds = totalProcessingTime - elapsedTime;

                // Update status messages based on progress
                if (progressPercent < 10) {
                    statusText.text("Uploading audio file...");
                } else if (progressPercent < 30) {
                    statusText.text("Analyzing audio for personal names...");
                } else if (progressPercent < 60) {
                    statusText.text("Processing audio segments...");
                } else if (progressPercent < 90) {
                    statusText.text("Replacing personal names in audio...");
                } else {
                    statusText.text("Finalizing processed audio...");
                }

                // Format and display time remaining
                timeRemainingText.text(formatTimeRemaining(remainingSeconds));
            }

            function formatTimeRemaining(seconds) {
                if (seconds <= 0) return "Almost complete...";

                const minutes = Math.floor(seconds / 60);
                const remainingSeconds = Math.floor(seconds % 60);

                if (minutes > 0) {
                    return `Approximately ${minutes} min ${remainingSeconds} sec remaining`;
                } else {
                    return `Approximately ${remainingSeconds} seconds remaining`;
                }
            }
        });
    </script>
}